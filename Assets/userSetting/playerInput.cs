//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/userSetting/playerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""playerInput"",
    ""maps"": [
        {
            ""name"": ""In3d"",
            ""id"": ""31e3090d-8076-484c-9389-68b54574d7eb"",
            ""actions"": [
                {
                    ""name"": ""run"",
                    ""type"": ""Value"",
                    ""id"": ""b458f3c4-b2bf-431b-978d-e36cdc00ea53"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""skill"",
                    ""type"": ""Button"",
                    ""id"": ""9cdf275b-271d-48df-a6f6-da282b97bf06"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ultraSkill"",
                    ""type"": ""Button"",
                    ""id"": ""f69040d8-f768-4939-baff-2b2c0301032f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""dash"",
                    ""type"": ""Button"",
                    ""id"": ""87b5089b-edf8-40be-b210-645d824f9641"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""atk"",
                    ""type"": ""Button"",
                    ""id"": ""c75da0f7-5951-47ef-ad43-9aef2d2a1c32"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap(duration=0.2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""holdatk"",
                    ""type"": ""Button"",
                    ""id"": ""e96c9a28-d7e6-45b1-a28e-c213302d4402"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=0.2,pressPoint=0.5)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""4f8f27c1-e6db-47e7-8f58-e7d6e8334899"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""run"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2ecee82b-d3f7-4762-b5f5-1da13f203574"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""bfaff51e-251d-4a7a-83b1-6b20caf0e134"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5db421d1-0247-486f-9414-0aa16d011a94"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a5ee612b-e8d3-40ad-b59f-7b594893cca9"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""72e04621-3ea4-45de-aaf4-05251f83a458"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ff7de394-179e-455d-83e6-1a36831ad739"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""skill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b7b0de8-385d-47d2-a200-75b8dce36767"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ultraSkill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e102ba21-795d-4dce-a83f-1466ae15199b"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ffae2ab6-56d3-42c4-b803-743b407c37dd"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""atk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b7c0b02-cbcc-41b3-8153-78304e6bf533"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""holdatk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""In2d"",
            ""id"": ""75f44fa9-2adb-46d4-8ba0-ce2f0108ac4d"",
            ""actions"": [
                {
                    ""name"": ""move"",
                    ""type"": ""Value"",
                    ""id"": ""15df24dc-5255-4ab8-9c2b-b0ff26824937"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""jump"",
                    ""type"": ""Button"",
                    ""id"": ""1cf58906-1aa8-4f80-94ca-3aa844709e72"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""919f705e-f3f5-4849-b90c-ad65c5841cf5"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""431a8908-3b48-4967-be54-70ff37ad6a8b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""051b5f65-86c8-4898-9e5c-846b49a8bce6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""8bbaaa1a-a5e1-4c78-9d6e-862a2d09479c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""6b31ee2d-3dd9-4e16-93b5-26f7c0830c49"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""31b56775-032f-40b1-97a6-04d393eb6f6b"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9ef07e51-57d5-4f8c-9188-6ef93d1d5e94"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""dialogue"",
            ""id"": ""70c28ca8-c407-411d-9ebf-c00b16ac6dd2"",
            ""actions"": [
                {
                    ""name"": ""next"",
                    ""type"": ""Button"",
                    ""id"": ""aa4ed45a-09a9-42fe-9dc8-f9b5499807f9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""72deab5a-3972-499d-92ff-f427c9863a95"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""next"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""changeChara"",
            ""id"": ""dc9e63ca-847c-4cf6-9104-6d1df561e26a"",
            ""actions"": [
                {
                    ""name"": ""1"",
                    ""type"": ""Button"",
                    ""id"": ""25cf3b02-5f45-4f81-9a4c-2b549ab9825e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""2"",
                    ""type"": ""Button"",
                    ""id"": ""2794e5ef-e7f4-4a86-805d-1a8bd55ad391"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""3"",
                    ""type"": ""Button"",
                    ""id"": ""c2e376bb-18e5-474d-952e-0d221088ef44"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""30b71275-9ca9-4cb8-84a2-c5b389c271f7"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b468ae9f-3ee2-4a1a-92f7-23b925980918"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3d4923dd-177e-4701-a5ea-68e2266e4c13"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // In3d
        m_In3d = asset.FindActionMap("In3d", throwIfNotFound: true);
        m_In3d_run = m_In3d.FindAction("run", throwIfNotFound: true);
        m_In3d_skill = m_In3d.FindAction("skill", throwIfNotFound: true);
        m_In3d_ultraSkill = m_In3d.FindAction("ultraSkill", throwIfNotFound: true);
        m_In3d_dash = m_In3d.FindAction("dash", throwIfNotFound: true);
        m_In3d_atk = m_In3d.FindAction("atk", throwIfNotFound: true);
        m_In3d_holdatk = m_In3d.FindAction("holdatk", throwIfNotFound: true);
        // In2d
        m_In2d = asset.FindActionMap("In2d", throwIfNotFound: true);
        m_In2d_move = m_In2d.FindAction("move", throwIfNotFound: true);
        m_In2d_jump = m_In2d.FindAction("jump", throwIfNotFound: true);
        // dialogue
        m_dialogue = asset.FindActionMap("dialogue", throwIfNotFound: true);
        m_dialogue_next = m_dialogue.FindAction("next", throwIfNotFound: true);
        // changeChara
        m_changeChara = asset.FindActionMap("changeChara", throwIfNotFound: true);
        m_changeChara__1 = m_changeChara.FindAction("1", throwIfNotFound: true);
        m_changeChara__2 = m_changeChara.FindAction("2", throwIfNotFound: true);
        m_changeChara__3 = m_changeChara.FindAction("3", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // In3d
    private readonly InputActionMap m_In3d;
    private List<IIn3dActions> m_In3dActionsCallbackInterfaces = new List<IIn3dActions>();
    private readonly InputAction m_In3d_run;
    private readonly InputAction m_In3d_skill;
    private readonly InputAction m_In3d_ultraSkill;
    private readonly InputAction m_In3d_dash;
    private readonly InputAction m_In3d_atk;
    private readonly InputAction m_In3d_holdatk;
    public struct In3dActions
    {
        private @PlayerInput m_Wrapper;
        public In3dActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @run => m_Wrapper.m_In3d_run;
        public InputAction @skill => m_Wrapper.m_In3d_skill;
        public InputAction @ultraSkill => m_Wrapper.m_In3d_ultraSkill;
        public InputAction @dash => m_Wrapper.m_In3d_dash;
        public InputAction @atk => m_Wrapper.m_In3d_atk;
        public InputAction @holdatk => m_Wrapper.m_In3d_holdatk;
        public InputActionMap Get() { return m_Wrapper.m_In3d; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(In3dActions set) { return set.Get(); }
        public void AddCallbacks(IIn3dActions instance)
        {
            if (instance == null || m_Wrapper.m_In3dActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_In3dActionsCallbackInterfaces.Add(instance);
            @run.started += instance.OnRun;
            @run.performed += instance.OnRun;
            @run.canceled += instance.OnRun;
            @skill.started += instance.OnSkill;
            @skill.performed += instance.OnSkill;
            @skill.canceled += instance.OnSkill;
            @ultraSkill.started += instance.OnUltraSkill;
            @ultraSkill.performed += instance.OnUltraSkill;
            @ultraSkill.canceled += instance.OnUltraSkill;
            @dash.started += instance.OnDash;
            @dash.performed += instance.OnDash;
            @dash.canceled += instance.OnDash;
            @atk.started += instance.OnAtk;
            @atk.performed += instance.OnAtk;
            @atk.canceled += instance.OnAtk;
            @holdatk.started += instance.OnHoldatk;
            @holdatk.performed += instance.OnHoldatk;
            @holdatk.canceled += instance.OnHoldatk;
        }

        private void UnregisterCallbacks(IIn3dActions instance)
        {
            @run.started -= instance.OnRun;
            @run.performed -= instance.OnRun;
            @run.canceled -= instance.OnRun;
            @skill.started -= instance.OnSkill;
            @skill.performed -= instance.OnSkill;
            @skill.canceled -= instance.OnSkill;
            @ultraSkill.started -= instance.OnUltraSkill;
            @ultraSkill.performed -= instance.OnUltraSkill;
            @ultraSkill.canceled -= instance.OnUltraSkill;
            @dash.started -= instance.OnDash;
            @dash.performed -= instance.OnDash;
            @dash.canceled -= instance.OnDash;
            @atk.started -= instance.OnAtk;
            @atk.performed -= instance.OnAtk;
            @atk.canceled -= instance.OnAtk;
            @holdatk.started -= instance.OnHoldatk;
            @holdatk.performed -= instance.OnHoldatk;
            @holdatk.canceled -= instance.OnHoldatk;
        }

        public void RemoveCallbacks(IIn3dActions instance)
        {
            if (m_Wrapper.m_In3dActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IIn3dActions instance)
        {
            foreach (var item in m_Wrapper.m_In3dActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_In3dActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public In3dActions @In3d => new In3dActions(this);

    // In2d
    private readonly InputActionMap m_In2d;
    private List<IIn2dActions> m_In2dActionsCallbackInterfaces = new List<IIn2dActions>();
    private readonly InputAction m_In2d_move;
    private readonly InputAction m_In2d_jump;
    public struct In2dActions
    {
        private @PlayerInput m_Wrapper;
        public In2dActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @move => m_Wrapper.m_In2d_move;
        public InputAction @jump => m_Wrapper.m_In2d_jump;
        public InputActionMap Get() { return m_Wrapper.m_In2d; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(In2dActions set) { return set.Get(); }
        public void AddCallbacks(IIn2dActions instance)
        {
            if (instance == null || m_Wrapper.m_In2dActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_In2dActionsCallbackInterfaces.Add(instance);
            @move.started += instance.OnMove;
            @move.performed += instance.OnMove;
            @move.canceled += instance.OnMove;
            @jump.started += instance.OnJump;
            @jump.performed += instance.OnJump;
            @jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IIn2dActions instance)
        {
            @move.started -= instance.OnMove;
            @move.performed -= instance.OnMove;
            @move.canceled -= instance.OnMove;
            @jump.started -= instance.OnJump;
            @jump.performed -= instance.OnJump;
            @jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IIn2dActions instance)
        {
            if (m_Wrapper.m_In2dActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IIn2dActions instance)
        {
            foreach (var item in m_Wrapper.m_In2dActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_In2dActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public In2dActions @In2d => new In2dActions(this);

    // dialogue
    private readonly InputActionMap m_dialogue;
    private List<IDialogueActions> m_DialogueActionsCallbackInterfaces = new List<IDialogueActions>();
    private readonly InputAction m_dialogue_next;
    public struct DialogueActions
    {
        private @PlayerInput m_Wrapper;
        public DialogueActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @next => m_Wrapper.m_dialogue_next;
        public InputActionMap Get() { return m_Wrapper.m_dialogue; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DialogueActions set) { return set.Get(); }
        public void AddCallbacks(IDialogueActions instance)
        {
            if (instance == null || m_Wrapper.m_DialogueActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DialogueActionsCallbackInterfaces.Add(instance);
            @next.started += instance.OnNext;
            @next.performed += instance.OnNext;
            @next.canceled += instance.OnNext;
        }

        private void UnregisterCallbacks(IDialogueActions instance)
        {
            @next.started -= instance.OnNext;
            @next.performed -= instance.OnNext;
            @next.canceled -= instance.OnNext;
        }

        public void RemoveCallbacks(IDialogueActions instance)
        {
            if (m_Wrapper.m_DialogueActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDialogueActions instance)
        {
            foreach (var item in m_Wrapper.m_DialogueActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DialogueActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DialogueActions @dialogue => new DialogueActions(this);

    // changeChara
    private readonly InputActionMap m_changeChara;
    private List<IChangeCharaActions> m_ChangeCharaActionsCallbackInterfaces = new List<IChangeCharaActions>();
    private readonly InputAction m_changeChara__1;
    private readonly InputAction m_changeChara__2;
    private readonly InputAction m_changeChara__3;
    public struct ChangeCharaActions
    {
        private @PlayerInput m_Wrapper;
        public ChangeCharaActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @_1 => m_Wrapper.m_changeChara__1;
        public InputAction @_2 => m_Wrapper.m_changeChara__2;
        public InputAction @_3 => m_Wrapper.m_changeChara__3;
        public InputActionMap Get() { return m_Wrapper.m_changeChara; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ChangeCharaActions set) { return set.Get(); }
        public void AddCallbacks(IChangeCharaActions instance)
        {
            if (instance == null || m_Wrapper.m_ChangeCharaActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ChangeCharaActionsCallbackInterfaces.Add(instance);
            @_1.started += instance.On_1;
            @_1.performed += instance.On_1;
            @_1.canceled += instance.On_1;
            @_2.started += instance.On_2;
            @_2.performed += instance.On_2;
            @_2.canceled += instance.On_2;
            @_3.started += instance.On_3;
            @_3.performed += instance.On_3;
            @_3.canceled += instance.On_3;
        }

        private void UnregisterCallbacks(IChangeCharaActions instance)
        {
            @_1.started -= instance.On_1;
            @_1.performed -= instance.On_1;
            @_1.canceled -= instance.On_1;
            @_2.started -= instance.On_2;
            @_2.performed -= instance.On_2;
            @_2.canceled -= instance.On_2;
            @_3.started -= instance.On_3;
            @_3.performed -= instance.On_3;
            @_3.canceled -= instance.On_3;
        }

        public void RemoveCallbacks(IChangeCharaActions instance)
        {
            if (m_Wrapper.m_ChangeCharaActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IChangeCharaActions instance)
        {
            foreach (var item in m_Wrapper.m_ChangeCharaActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ChangeCharaActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ChangeCharaActions @changeChara => new ChangeCharaActions(this);
    public interface IIn3dActions
    {
        void OnRun(InputAction.CallbackContext context);
        void OnSkill(InputAction.CallbackContext context);
        void OnUltraSkill(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnAtk(InputAction.CallbackContext context);
        void OnHoldatk(InputAction.CallbackContext context);
    }
    public interface IIn2dActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IDialogueActions
    {
        void OnNext(InputAction.CallbackContext context);
    }
    public interface IChangeCharaActions
    {
        void On_1(InputAction.CallbackContext context);
        void On_2(InputAction.CallbackContext context);
        void On_3(InputAction.CallbackContext context);
    }
}
